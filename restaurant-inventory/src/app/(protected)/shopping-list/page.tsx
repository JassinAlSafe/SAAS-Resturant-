"use client";

import { useState } from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { useShoppingList } from "./hooks/useShoppingList";
import ShoppingListTable from "./components/ShoppingListTable";
import ShoppingListHeader from "./components/ShoppingListHeader";
import ShoppingListModals from "./components/modals";
import { ShoppingListItem } from "@/lib/types";
import { Loader2 } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";

// Create a client
const queryClient = new QueryClient();

// Wrap the main content in the QueryClientProvider
export default function ShoppingListPage() {
  return (
    <QueryClientProvider client={queryClient}>
      <ShoppingListContent />
    </QueryClientProvider>
  );
}

function ShoppingListContent() {
  const [selectedItem, setSelectedItem] = useState<ShoppingListItem | null>(
    null
  );
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [showPurchased, setShowPurchased] = useState(false);
  const [sortBy, setSortBy] = useState("date");
  const [filterBy, setFilterBy] = useState("all");

  const {
    shoppingList,
    categories,
    isLoading,
    error,
    addItem,
    updateItem,
    removeItem,
    markAsPurchased,
    generateList,
    isAddingItem,
    isUpdatingItem,
    isDeletingItem,
    isMarkingAsPurchased,
    isGeneratingList,
  } = useShoppingList();

  // Filter shopping list based on search term, category, and other filters
  const filteredList = shoppingList.filter((item) => {
    const matchesSearch = item.name
      .toLowerCase()
      .includes(searchTerm.toLowerCase());

    const matchesCategory =
      selectedCategory === "all" || item.category === selectedCategory;

    const matchesPurchasedFilter = showPurchased || !item.isPurchased;

    const matchesTypeFilter =
      filterBy === "all" ||
      (filterBy === "pending" && !item.isPurchased) ||
      (filterBy === "purchased" && item.isPurchased) ||
      (filterBy === "auto" && item.isAutoGenerated) ||
      (filterBy === "manual" && !item.isAutoGenerated) ||
      (filterBy === "urgent" && item.isUrgent);

    return (
      matchesSearch &&
      matchesCategory &&
      matchesPurchasedFilter &&
      matchesTypeFilter
    );
  });

  // Sort the filtered list
  const sortedList = [...filteredList].sort((a, b) => {
    switch (sortBy) {
      case "name":
        return a.name.localeCompare(b.name);
      case "cost":
        return (b.estimatedCost || 0) - (a.estimatedCost || 0);
      case "urgency":
        return (b.isUrgent ? 1 : 0) - (a.isUrgent ? 1 : 0);
      case "date":
      default:
        return (
          new Date(b.addedAt || 0).getTime() -
          new Date(a.addedAt || 0).getTime()
        );
    }
  });

  // Calculate total estimated cost
  const totalEstimatedCost = filteredList.reduce(
    (total, item) => total + (item.estimatedCost || 0),
    0
  );

  // Calculate item counts
  const itemsCount = {
    total: shoppingList.length,
    purchased: shoppingList.filter((item) => item.isPurchased).length,
    urgent: shoppingList.filter((item) => item.isUrgent).length,
    autoGenerated: shoppingList.filter((item) => item.isAutoGenerated).length,
  };

  // Handle item deletion with proper type handling
  const handleDeleteItem = async (id: string) => {
    await removeItem(id);
  };

  // Handle item update with proper type handling
  const handleUpdateItem = async (updates: Partial<ShoppingListItem>) => {
    if (selectedItem) {
      await updateItem({ id: selectedItem.id, updates });
    }
  };

  if (isLoading) {
    return (
      <div className="flex h-[50vh] items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex h-[50vh] flex-col items-center justify-center gap-4">
        <p className="text-lg font-medium text-destructive">
          Error loading shopping list
        </p>
        <p className="text-sm text-muted-foreground">
          Please try refreshing the page
        </p>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-7xl space-y-8">
      <div className="flex flex-col space-y-1.5 mb-8">
        <h1 className="text-2xl sm:text-3xl font-bold tracking-tight">
          Shopping List
        </h1>
        <p className="text-muted-foreground">
          Manage your restaurant&apos;s shopping items and track purchases
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-12 gap-6">
        {/* Main Content Area */}
        <div className="md:col-span-12 space-y-6">
          <Card className="border shadow-sm bg-white">
            <CardContent className="p-4 sm:p-6">
              <ShoppingListHeader
                onAddItem={() => setIsAddModalOpen(true)}
                onGenerateList={async () => {
                  await generateList();
                }}
                isGenerating={isGeneratingList}
                searchTerm={searchTerm}
                onSearchChange={setSearchTerm}
                selectedCategory={selectedCategory}
                onCategoryChange={setSelectedCategory}
                categories={categories}
                totalEstimatedCost={totalEstimatedCost}
                itemsCount={itemsCount}
                showPurchased={showPurchased}
                onToggleShowPurchased={() => setShowPurchased(!showPurchased)}
                sortBy={sortBy}
                onSortChange={setSortBy}
                filterBy={filterBy}
                onFilterChange={setFilterBy}
              />
            </CardContent>
          </Card>

          <Card className="border shadow-sm bg-white overflow-hidden">
            <CardContent className="p-0">
              <ShoppingListTable
                items={sortedList}
                onEditItem={(item: ShoppingListItem) => {
                  setSelectedItem(item);
                  setIsEditModalOpen(true);
                }}
                onDeleteItem={handleDeleteItem}
                onTogglePurchased={async (id: string, isPurchased: boolean) => {
                  await markAsPurchased({ id, isPurchased });
                }}
                onAddItem={() => setIsAddModalOpen(true)}
                isDeleting={isDeletingItem}
                isUpdating={isMarkingAsPurchased}
              />
            </CardContent>
          </Card>
        </div>
      </div>

      <ShoppingListModals
        selectedItem={selectedItem}
        isAddModalOpen={isAddModalOpen}
        isEditModalOpen={isEditModalOpen}
        onCloseAddModal={() => setIsAddModalOpen(false)}
        onCloseEditModal={() => {
          setIsEditModalOpen(false);
          setSelectedItem(null);
        }}
        onAdd={async (item) => {
          await addItem(item);
        }}
        onUpdate={handleUpdateItem}
        categories={categories}
        isSubmitting={isAddingItem || isUpdatingItem}
      />
    </div>
  );
}
