// ShoppingListSummary.tsx
"use client";

import { motion } from "framer-motion";
import { useCurrency } from "@/lib/currency";
import {
  ShoppingBag,
  CircleDollarSign,
  AlertCircle,
  CheckCircle2,
  Clock,
} from "lucide-react";
import { cn } from "@/lib/utils";

interface ItemCounts {
  total: number;
  purchased: number;
  urgent: number;
  autoGenerated: number;
}

interface ShoppingListSummaryProps {
  itemsCount: ItemCounts;
  totalEstimatedCost: number;
  shoppingPhase: "planning" | "in-progress" | "complete" | "empty";
}

export default function ShoppingListSummary({
  itemsCount,
  totalEstimatedCost,
  shoppingPhase,
}: ShoppingListSummaryProps) {
  const { formatCurrency } = useCurrency();

  // Calculate progress percentages
  const progress =
    itemsCount.total > 0
      ? Math.round((itemsCount.purchased / itemsCount.total) * 100)
      : 0;

  const urgentPercentage =
    itemsCount.total > 0
      ? Math.round((itemsCount.urgent / itemsCount.total) * 100)
      : 0;

  // Phase-based styling
  const getPhaseColor = () => {
    switch (shoppingPhase) {
      case "complete":
        return "text-green-600 bg-green-50";
      case "in-progress":
        return "text-orange-500 bg-orange-50";
      case "planning":
        return "text-blue-600 bg-blue-50";
      default:
        return "text-gray-600 bg-gray-100";
    }
  };

  const getPhaseIcon = () => {
    switch (shoppingPhase) {
      case "complete":
        return CheckCircle2;
      case "in-progress":
        return Clock;
      case "planning":
        return ShoppingBag;
      default:
        return ShoppingBag;
    }
  };

  const PhaseIcon = getPhaseIcon();

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4 }}
      className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 w-full mb-6"
    >
      {/* Shopping Phase Card */}
      <motion.div
        whileHover={{ y: -5 }}
        transition={{ type: "spring", stiffness: 300 }}
        className="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden"
      >
        <div className="p-5">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-black">Shopping Phase</h2>
            <div className={cn("p-2 rounded-full", getPhaseColor())}>
              <PhaseIcon className="w-5 h-5" />
            </div>
          </div>
          <div className="mt-2">
            <p
              className={cn("text-2xl font-bold capitalize", {
                "text-green-600": shoppingPhase === "complete",
                "text-orange-500": shoppingPhase === "in-progress",
                "text-blue-600": shoppingPhase === "planning",
                "text-gray-700": shoppingPhase === "empty",
              })}
            >
              {shoppingPhase === "in-progress" ? "In Progress" : shoppingPhase}
            </p>
            <div className="mt-4">
              <div className="text-xs text-gray-600 mb-1 flex justify-between">
                <span>Progress</span>
                <span className="font-medium">{progress}%</span>
              </div>
              <div className="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${progress}%` }}
                  transition={{ duration: 1, delay: 0.2 }}
                  className={cn("h-full rounded-full", {
                    "bg-green-500": progress === 100,
                    "bg-orange-500": progress > 0 && progress < 100,
                    "bg-gray-300": progress === 0,
                  })}
                />
              </div>
            </div>
          </div>
        </div>
      </motion.div>

      {/* Total Items Card */}
      <motion.div
        whileHover={{ y: -5 }}
        transition={{ type: "spring", stiffness: 300 }}
        className="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden"
      >
        <div className="p-5">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-black">Total Items</h2>
            <div className="p-2 rounded-full bg-orange-50 text-orange-500">
              <ShoppingBag className="w-5 h-5" />
            </div>
          </div>
          <div className="mt-2">
            <p className="text-3xl font-bold text-black">{itemsCount.total}</p>
            <div className="flex justify-between mt-1 text-sm">
              <span className="text-gray-600">Purchased:</span>
              <span className="font-medium text-black">
                {itemsCount.purchased}
              </span>
            </div>
            <div className="flex justify-between mt-1 text-sm">
              <span className="text-gray-600">Pending:</span>
              <span className="font-medium text-black">
                {itemsCount.total - itemsCount.purchased}
              </span>
            </div>
          </div>
        </div>
      </motion.div>

      {/* Estimated Cost Card */}
      <motion.div
        whileHover={{ y: -5 }}
        transition={{ type: "spring", stiffness: 300 }}
        className="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden"
      >
        <div className="p-5">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-black">Estimated Cost</h2>
            <div className="p-2 rounded-full bg-green-50 text-green-600">
              <CircleDollarSign className="w-5 h-5" />
            </div>
          </div>
          <div className="mt-2">
            <p className="text-3xl font-bold text-orange-500">
              {formatCurrency(totalEstimatedCost)}
            </p>
            <div className="mt-4">
              <div className="text-xs text-gray-600 mb-1 flex justify-between">
                <span>Shopping Completion</span>
                <span className="font-medium">{progress}%</span>
              </div>
              <div className="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${progress}%` }}
                  transition={{ duration: 1, delay: 0.2 }}
                  className="h-full bg-gradient-to-r from-orange-400 to-orange-500 rounded-full"
                />
              </div>
            </div>
          </div>
        </div>
      </motion.div>

      {/* Urgent Items Card */}
      <motion.div
        whileHover={{ y: -5 }}
        transition={{ type: "spring", stiffness: 300 }}
        className="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden"
      >
        <div className="p-5">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold text-black">Urgent Items</h2>
            <div className="p-2 rounded-full bg-red-50 text-red-600">
              <AlertCircle className="w-5 h-5" />
            </div>
          </div>
          <div className="mt-2">
            <p className="text-3xl font-bold text-red-600">
              {itemsCount.urgent}
            </p>
            <div className="flex justify-between mt-1 text-sm">
              <span className="text-gray-600">Percentage:</span>
              <span className="font-medium text-black">
                {urgentPercentage}%
              </span>
            </div>
            <div className="mt-3">
              <div className="text-xs text-gray-600 mb-1">Priority Level</div>
              <div className="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
                <motion.div
                  initial={{ width: 0 }}
                  animate={{ width: `${urgentPercentage}%` }}
                  transition={{ duration: 1, delay: 0.2 }}
                  className="h-full bg-red-500 rounded-full"
                />
              </div>
            </div>
          </div>
        </div>
      </motion.div>
    </motion.div>
  );
}
