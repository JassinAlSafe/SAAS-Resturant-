// ShoppingListSummary.tsx
"use client";

import { useCurrency } from "@/lib/currency";
import {
  ShoppingCart,
  AlertTriangle,
  Package,
  CircleDollarSign,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

interface ShoppingListSummaryProps {
  totalItems: number;
  purchasedItems: number;
  urgentItems: number;
  autoGeneratedItems: number;
  totalCost: number;
}

export default function ShoppingListSummary({
  totalItems,
  purchasedItems,
  urgentItems,
  autoGeneratedItems,
  totalCost,
}: ShoppingListSummaryProps) {
  const { formatCurrency } = useCurrency();

  const urgentPercentage =
    totalItems > 0 ? Math.round((urgentItems / totalItems) * 100) : 0;
  const autoPercentage =
    totalItems > 0 ? Math.round((autoGeneratedItems / totalItems) * 100) : 0;
  const purchasedPercentage =
    totalItems > 0 ? Math.round((purchasedItems / totalItems) * 100) : 0;

  const summaryCards = [
    {
      title: "Total Items",
      value: totalItems,
      subtitle: `${purchasedItems} purchased (${purchasedPercentage}%)`,
      icon: ShoppingCart,
      color: "text-orange-500",
      iconBg: "bg-orange-50",
      gradient: "from-orange-500 to-orange-400",
      border: "border-orange-100",
    },
    {
      title: "Estimated Cost",
      value: formatCurrency(totalCost),
      subtitle: "",
      icon: CircleDollarSign,
      color: "text-emerald-500",
      iconBg: "bg-emerald-50",
      gradient: "from-emerald-500 to-emerald-400",
      border: "border-emerald-100",
    },
    {
      title: "Urgent Items",
      value: urgentItems,
      subtitle: `${urgentPercentage}% of total`,
      icon: AlertTriangle,
      color: "text-red-500",
      iconBg: "bg-red-50",
      gradient: "from-red-500 to-red-400",
      border: "border-red-100",
      badge: urgentItems > 0 ? "Attention" : null,
    },
    {
      title: "Auto-Generated",
      value: autoGeneratedItems,
      subtitle: `${autoPercentage}% of total`,
      icon: Package,
      color: "text-blue-500",
      iconBg: "bg-blue-50",
      gradient: "from-blue-500 to-blue-400",
      border: "border-blue-100",
    },
  ];

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
      {summaryCards.map((card) => (
        <Card
          key={card.title}
          className={cn(
            "border shadow-md hover:shadow-lg transition-all rounded-xl overflow-hidden",
            card.border
          )}
        >
          <div className={cn("h-1 w-full bg-gradient-to-r", card.gradient)} />
          <CardContent className="p-5">
            <div className="flex justify-between items-start">
              <div>
                <p className="text-sm font-medium text-gray-600">
                  {card.title}
                </p>
                <div className="flex items-center gap-2 mt-2">
                  <h3 className="text-3xl font-bold">{card.value}</h3>
                  {card.badge && (
                    <Badge className="bg-red-100 text-red-600 hover:bg-red-100 font-medium">
                      {card.badge}
                    </Badge>
                  )}
                </div>
                {card.subtitle && (
                  <p className="text-gray-500 text-xs mt-1">{card.subtitle}</p>
                )}
              </div>
              <div
                className={cn(
                  "flex items-center justify-center rounded-full w-12 h-12 shadow-sm",
                  card.iconBg
                )}
              >
                <card.icon className={cn("w-6 h-6", card.color)} />
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
