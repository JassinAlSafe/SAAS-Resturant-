"use client";

import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useCurrency } from "@/lib/currency-context";
import { ShoppingListItem } from "@/lib/services/shopping-list-service";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { FiCheck, FiTrash2 } from "react-icons/fi";

interface ShoppingListTableProps {
  items: ShoppingListItem[];
  onMarkPurchased: (itemId: string) => void;
  onRemoveItem: (itemId: string) => void;
}

export default function ShoppingListTable({
  items,
  onMarkPurchased,
  onRemoveItem,
}: ShoppingListTableProps) {
  // Get currency formatter
  const { formatCurrency } = useCurrency();

  return (
    <div className="overflow-x-auto">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Item</TableHead>
            <TableHead>Category</TableHead>
            <TableHead>Quantity</TableHead>
            <TableHead>Cost</TableHead>
            <TableHead>Source</TableHead>
            <TableHead className="text-right">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {items.length === 0 ? (
            <TableRow>
              <TableCell
                colSpan={6}
                className="text-center py-8 text-muted-foreground"
              >
                No items found matching your filters.
              </TableCell>
            </TableRow>
          ) : (
            items.map((item) => (
              <TableRow
                key={item.id}
                className={
                  item.isPurchased ? "bg-green-50 dark:bg-green-950/20" : ""
                }
              >
                <TableCell className="font-medium">
                  {item.name}
                  {item.isPurchased && (
                    <Badge variant="success" className="ml-2">
                      Purchased
                    </Badge>
                  )}
                </TableCell>
                <TableCell>{item.category}</TableCell>
                <TableCell>
                  {item.quantity} {item.unit}
                </TableCell>
                <TableCell>{formatCurrency(item.estimatedCost)}</TableCell>
                <TableCell>
                  <Badge
                    variant={item.isAutoGenerated ? "secondary" : "outline"}
                  >
                    {item.isAutoGenerated ? "Auto-generated" : "Manual"}
                  </Badge>
                </TableCell>
                <TableCell className="text-right">
                  <div className="flex justify-end space-x-1">
                    {!item.isPurchased && (
                      <>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 text-green-600"
                          onClick={() => onMarkPurchased(item.id)}
                          title="Mark as purchased"
                        >
                          <FiCheck className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 w-8 text-red-600"
                          onClick={() => onRemoveItem(item.id)}
                          title="Remove item"
                        >
                          <FiTrash2 className="h-4 w-4" />
                        </Button>
                      </>
                    )}
                    {item.isPurchased && (
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 text-red-600"
                        onClick={() => onRemoveItem(item.id)}
                        title="Remove item"
                      >
                        <FiTrash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </TableCell>
              </TableRow>
            ))
          )}
        </TableBody>
      </Table>
    </div>
  );
}
