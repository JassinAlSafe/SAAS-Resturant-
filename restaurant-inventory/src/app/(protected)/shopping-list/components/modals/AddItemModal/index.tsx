"use client";

import { useState, useEffect, useMemo } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { ShoppingBag, AlertTriangle } from "lucide-react";
import { Modal, ModalSection, ModalFooter } from "@/components/ui/modal/modal";
import { Form } from "@/components/ui/form";
import { Alert, AlertDescription } from "@/components/ui/alert";

// Import the subcomponents
import ItemNameField from "./ItemNameField";
import QuantityUnitFields from "./QuantityUnitFields";
import CategoryCostFields from "./CategoryCostFields";
import UrgentCheckField from "./UrgentCheckField";
import NotesField from "./NotesField";

// Import types
import {
  AddItemModalProps,
  FormData,
  formSchema,
  RECENTLY_USED_KEY,
  unitGroups,
} from "./types";

export default function AddItemModal({
  isOpen,
  onClose,
  onAddItem,
  categories,
  isAddingItem,
  initialData,
}: AddItemModalProps) {
  const [useCustomUnit, setUseCustomUnit] = useState(false);
  const [recentlyUsed, setRecentlyUsed] = useState<string[]>([]);
  const [formError, setFormError] = useState<string | null>(null);

  // Determine if we're in edit mode
  const isEditMode = !!initialData;

  // Initialize form with default values or initialData if provided
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: initialData?.name || "",
      quantity: initialData?.quantity || 1,
      unit: initialData?.unit || "pieces",
      category: initialData?.category || categories[0] || "",
      notes: initialData?.notes || "",
      estimatedCost: initialData?.estimatedCost || 0,
      isUrgent: initialData?.isUrgent || false,
      custom_unit: "",
    },
    mode: "onChange", // Validate on change for better user feedback
  });

  // Check if the initial unit is custom (not in standard units)
  useEffect(() => {
    if (initialData?.unit) {
      const allStandardUnits = [
        ...unitGroups.weight,
        ...unitGroups.volume,
        ...unitGroups.count,
      ];
      const isCustomUnit = !allStandardUnits.includes(initialData.unit);
      setUseCustomUnit(isCustomUnit);

      if (isCustomUnit) {
        form.setValue("custom_unit", initialData.unit);
      }
    }
  }, [initialData, form]);

  // Load recently used categories from localStorage
  useEffect(() => {
    if (!isOpen) return; // Only load when modal opens

    try {
      const saved = localStorage.getItem(RECENTLY_USED_KEY);
      if (saved) {
        setRecentlyUsed(JSON.parse(saved));
      }
    } catch (error) {
      console.error("Failed to load recently used categories:", error);
      // Clear potentially corrupted data
      localStorage.removeItem(RECENTLY_USED_KEY);
    }
  }, [isOpen]);

  // Reset form when modal is closed
  useEffect(() => {
    if (!isOpen) {
      form.reset({
        name: "",
        quantity: 1,
        unit: "pieces",
        category: categories[0] || "",
        notes: "",
        estimatedCost: 0,
        isUrgent: false,
        custom_unit: "",
      });
      setFormError(null);
      setUseCustomUnit(false);
    }
  }, [isOpen, form, categories]);

  // Save a category to recently used
  const addToRecentlyUsed = (category: string) => {
    if (!category || !recentlyUsed.includes(category)) {
      const updated = category
        ? [category, ...recentlyUsed.filter((c) => c !== category).slice(0, 4)]
        : recentlyUsed;

      setRecentlyUsed(updated);
      try {
        localStorage.setItem(RECENTLY_USED_KEY, JSON.stringify(updated));
      } catch (error) {
        console.error("Failed to save recently used categories:", error);
      }
    }
  };

  const handleSubmit = async (data: FormData) => {
    try {
      setFormError(null);

      // If using custom unit, replace the unit with the custom value
      if (useCustomUnit && data.custom_unit) {
        data.unit = data.custom_unit;
      } else if (useCustomUnit && !data.custom_unit) {
        setFormError("Custom unit is required");
        return;
      }

      // Add to recently used categories
      if (data.category) {
        addToRecentlyUsed(data.category);
      }

      // Prepare the item data
      const itemData = {
        name: data.name,
        quantity: data.quantity,
        unit: data.unit,
        category: data.category || "",
        estimatedCost: data.estimatedCost,
        notes: data.notes || "",
        isUrgent: data.isUrgent,
        isPurchased: initialData?.isPurchased || false,
        isAutoGenerated: initialData?.isAutoGenerated || false,
      };

      // Pass the data to the onAddItem handler (works for both adding and updating)
      await onAddItem(itemData);

      form.reset();
      onClose();
    } catch (error) {
      console.error("Error saving item:", error);
      setFormError(
        initialData
          ? "Failed to update item. Please try again."
          : "Failed to add item. Please try again."
      );
    }
  };

  // Function to get popular categories (most used)
  const popularCategories = useMemo(() => {
    return categories.slice(0, 5);
  }, [categories]);

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={
        <div className="flex items-center gap-3">
          <div className="bg-primary/10 p-2 rounded-full">
            <ShoppingBag className="h-6 w-6 text-primary" />
          </div>
          <span className="text-2xl font-semibold">
            {isEditMode ? "Edit Shopping Item" : "Add Shopping Item"}
          </span>
        </div>
      }
      description={
        <span className="text-base-content/70 ml-11 block">
          {isEditMode
            ? "Update the details of this item"
            : "Fill in the details to add a new item to your shopping list"}
        </span>
      }
      size="lg"
      showClose={false}
      className="modal-box overflow-hidden rounded-box shadow-lg max-w-2xl"
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
          {formError && (
            <Alert
              variant="destructive"
              className="alert alert-error text-sm rounded-box"
            >
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>{formError}</AlertDescription>
            </Alert>
          )}

          <ModalSection divider className="pt-1 pb-6">
            <ItemNameField control={form.control} />
          </ModalSection>

          <ModalSection divider className="pb-6">
            <QuantityUnitFields
              control={form.control}
              useCustomUnit={useCustomUnit}
              setUseCustomUnit={setUseCustomUnit}
              setValue={form.setValue}
            />
          </ModalSection>

          <ModalSection divider className="pb-6">
            <CategoryCostFields
              control={form.control}
              setValue={form.setValue}
              categories={categories}
              recentlyUsed={recentlyUsed}
              popularCategories={popularCategories}
            />
            <div className="mt-5">
              <UrgentCheckField control={form.control} />
            </div>
          </ModalSection>

          <ModalSection className="pb-6">
            <NotesField control={form.control} />
          </ModalSection>

          <ModalFooter
            onClose={onClose}
            closeLabel="Cancel"
            confirmLabel={isEditMode ? "Update Item" : "Add Item"}
            onConfirm={form.handleSubmit(handleSubmit)}
            isSubmitting={isAddingItem}
            confirmVariant="default"
            fullWidth
          />
        </form>
      </Form>
    </Modal>
  );
}
