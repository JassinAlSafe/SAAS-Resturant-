"use client";

import { useState } from "react";
import { ShoppingListItem } from "@/lib/services/shopping-list-service";
import { useNotificationHelpers } from "@/lib/notification-context";

export function useAddShoppingItem(
  onAddItem: (
    item: Omit<ShoppingListItem, "id" | "addedAt">
  ) => Promise<ShoppingListItem | null>
) {
  // Form state
  const [isAddingItem, setIsAddingItem] = useState(false);
  const [newItemName, setNewItemName] = useState("");
  const [newItemQuantity, setNewItemQuantity] = useState(1);
  const [newItemUnit, setNewItemUnit] = useState("kg");
  const [newItemCategory, setNewItemCategory] = useState("");
  const [newItemCost, setNewItemCost] = useState(0);

  // Error handling
  const { error } = useNotificationHelpers();

  // Toggle add item form
  const toggleAddItemForm = () => {
    setIsAddingItem(!isAddingItem);
    if (!isAddingItem) {
      // Reset form when opening
      resetForm();
    }
  };

  // Reset form fields
  const resetForm = () => {
    setNewItemName("");
    setNewItemQuantity(1);
    setNewItemUnit("kg");
    setNewItemCategory("");
    setNewItemCost(0);
  };

  // Handle adding a new item
  const handleAddItem = async () => {
    // Validate inputs
    if (!newItemName.trim()) {
      error("Error", "Please enter an item name");
      return null;
    }

    if (newItemQuantity <= 0) {
      error("Error", "Quantity must be greater than 0");
      return null;
    }

    // Create item data
    const itemData = {
      inventoryItemId: "", // Empty for manual items
      name: newItemName,
      quantity: newItemQuantity,
      unit: newItemUnit,
      estimatedCost: newItemCost,
      category: newItemCategory || "Other",
      isAutoGenerated: false,
      isPurchased: false,
    };

    // Call add item function from parent hook
    const newItem = await onAddItem(itemData);

    if (newItem) {
      // Reset form and close it
      resetForm();
      setIsAddingItem(false);
    }

    return newItem;
  };

  return {
    isAddingItem,
    newItemName,
    setNewItemName,
    newItemQuantity,
    setNewItemQuantity,
    newItemUnit,
    setNewItemUnit,
    newItemCategory,
    setNewItemCategory,
    newItemCost,
    setNewItemCost,
    toggleAddItemForm,
    resetForm,
    handleAddItem,
  };
}
