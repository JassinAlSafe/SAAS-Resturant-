"use client";

import { useCurrency } from "@/lib/currency";
import ShoppingListActions from "./ShoppingListActions";
import {
  ShoppingBag,
  CircleDollarSign,
  AlertCircle,
  LayoutTemplate,
  Search,
} from "lucide-react";

interface ItemCounts {
  total: number;
  purchased: number;
  urgent: number;
  autoGenerated: number;
}

interface ShoppingListHeaderProps {
  onAddItem: () => void;
  onGenerateList: () => Promise<void>;
  isGenerating: boolean;
  searchTerm: string;
  onSearchChange: (value: string) => void;
  selectedCategory: string;
  onCategoryChange: (value: string) => void;
  categories: string[];
  totalEstimatedCost: number;
  itemsCount?: ItemCounts;
  showPurchased?: boolean;
  onToggleShowPurchased?: () => void;
  sortBy?: string;
  onSortChange?: (value: string) => void;
  filterBy?: string;
  onFilterChange?: (value: string) => void;
}

/**
 * A summary stat card component with DaisyUI styling
 */
function StatCard({
  title,
  value,
  icon: Icon,
  color,
  detailLabel,
  detailValue,
  progress,
}: {
  title: string;
  value: string | number;
  icon: React.ElementType;
  color: string;
  detailLabel?: string;
  detailValue?: string | number;
  progress?: number;
}) {
  return (
    <div className={`stat bg-base-100 shadow rounded-box`}>
      <div className={`stat-figure ${color}`}>
        <Icon className="w-8 h-8" />
      </div>
      <div className="stat-title">{title}</div>
      <div className={`stat-value ${color}`}>{value}</div>
      {detailLabel && detailValue && (
        <div className="stat-desc">
          {detailLabel}: {detailValue}
        </div>
      )}
      {progress !== undefined && (
        <div className="mt-2">
          <progress
            className={`progress ${
              color === "text-success"
                ? "progress-success"
                : color === "text-error"
                ? "progress-error"
                : "progress-primary"
            } w-full`}
            value={progress}
            max="100"
          ></progress>
        </div>
      )}
    </div>
  );
}

export default function ShoppingListHeader({
  onAddItem,
  onGenerateList,
  isGenerating,
  searchTerm,
  onSearchChange,
  selectedCategory,
  onCategoryChange,
  categories,
  totalEstimatedCost,
  itemsCount = {
    total: 0,
    purchased: 0,
    urgent: 0,
    autoGenerated: 0,
  },
  showPurchased = false,
  onToggleShowPurchased = () => {},
  sortBy = "date",
  onSortChange = () => {},
  filterBy = "all",
  onFilterChange = () => {},
}: ShoppingListHeaderProps) {
  const { formatCurrency } = useCurrency();
  const progress =
    itemsCount.total > 0
      ? Math.round((itemsCount.purchased / itemsCount.total) * 100)
      : 0;

  // Calculate percentages for display
  const urgentPercentage =
    itemsCount.total > 0
      ? Math.round((itemsCount.urgent / itemsCount.total) * 100)
      : 0;

  const autoPercentage =
    itemsCount.total > 0
      ? Math.round((itemsCount.autoGenerated / itemsCount.total) * 100)
      : 0;

  // Filter options with counts
  const filterOptions = [
    { value: "all", label: "All Items", count: itemsCount.total },
    {
      value: "pending",
      label: "Not Purchased",
      count: itemsCount.total - itemsCount.purchased,
    },
    { value: "purchased", label: "Purchased", count: itemsCount.purchased },
    { value: "urgent", label: "Urgent Only", count: itemsCount.urgent },
    { value: "auto", label: "Auto-Generated", count: itemsCount.autoGenerated },
    {
      value: "manual",
      label: "Manually Added",
      count: itemsCount.total - itemsCount.autoGenerated,
    },
  ];

  return (
    <div className="space-y-6">
      {/* Summary Stats */}
      <div className="stats stats-vertical lg:stats-horizontal shadow w-full">
        <StatCard
          title="Total Items"
          value={itemsCount.total}
          icon={ShoppingBag}
          color="text-primary"
          detailLabel="Purchased"
          detailValue={`${itemsCount.purchased} items`}
        />

        <StatCard
          title="Estimated Cost"
          value={formatCurrency(totalEstimatedCost)}
          icon={CircleDollarSign}
          color="text-success"
          progress={progress}
        />

        <StatCard
          title="Urgent"
          value={itemsCount.urgent}
          icon={AlertCircle}
          color="text-error"
          detailLabel="Percentage"
          detailValue={`${urgentPercentage}%`}
        />

        <StatCard
          title="Auto-Generated"
          value={itemsCount.autoGenerated}
          icon={LayoutTemplate}
          color="text-secondary"
          detailLabel="Percentage"
          detailValue={`${autoPercentage}%`}
        />
      </div>

      {/* Search and Actions */}
      <div className="card bg-base-100 shadow">
        <div className="card-body p-4">
          <div className="flex flex-col md:flex-row gap-4 justify-between">
            <div className="form-control w-full md:w-2/3">
              <div className="input-group w-full">
                <span className="btn btn-square btn-ghost">
                  <Search className="h-4 w-4" />
                </span>
                <input
                  type="text"
                  placeholder="Search shopping items..."
                  value={searchTerm}
                  onChange={(e) => onSearchChange(e.target.value)}
                  className="input input-bordered w-full"
                />
                <select
                  className="select select-bordered"
                  value={selectedCategory}
                  onChange={(e) => onCategoryChange(e.target.value)}
                >
                  <option value="all">All Categories</option>
                  {categories.map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <ShoppingListActions
              onAddClick={onAddItem}
              onGenerateClick={onGenerateList}
              onExportClick={() => {}}
              isGenerating={isGenerating}
            />
          </div>
        </div>
      </div>

      {/* Additional Filters */}
      <div className="navbar bg-base-100 shadow rounded-box">
        <div className="navbar-start">
          <div className="flex items-center">
            <span className="text-sm mr-2">Sort by:</span>
            <select
              value={sortBy}
              onChange={(e) => onSortChange(e.target.value)}
              className="select select-sm select-ghost"
            >
              <option value="date">Date Added</option>
              <option value="name">Name</option>
              <option value="cost">Est. Cost</option>
              <option value="category">Category</option>
            </select>
          </div>
        </div>

        <div className="navbar-center hidden lg:flex">
          <div className="flex gap-2">
            {filterOptions.map((option) => (
              <button
                key={option.value}
                onClick={() => onFilterChange(option.value)}
                className={`btn btn-sm ${
                  filterBy === option.value ? "btn-active" : "btn-ghost"
                }`}
              >
                {option.label}
                <div
                  className={`badge ${
                    filterBy === option.value
                      ? "badge-secondary"
                      : "badge-outline"
                  } ml-1`}
                >
                  {option.count}
                </div>
              </button>
            ))}
          </div>
        </div>

        <div className="navbar-end">
          <label className="cursor-pointer label">
            <span className="label-text mr-1">Show Purchased</span>
            <input
              type="checkbox"
              className="toggle toggle-sm toggle-primary"
              checked={showPurchased}
              onChange={onToggleShowPurchased}
            />
          </label>
        </div>
      </div>
    </div>
  );
}
