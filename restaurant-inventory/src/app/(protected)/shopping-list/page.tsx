"use client";

import { useState, useEffect } from "react";
import {
  FiPlus,
  FiEdit2,
  FiTrash2,
  FiSearch,
  FiRefreshCw,
  FiShoppingCart,
  FiCheck,
  FiFilter,
  FiPackage,
} from "react-icons/fi";
import Card from "@/components/Card";
import { InventoryItem } from "@/lib/types";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useCurrency } from "@/lib/currency-context";
import { CurrencySelector } from "@/components/currency-selector";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { inventoryService } from "@/lib/services/inventory-service";
import { useNotificationHelpers } from "@/lib/notification-context";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Checkbox } from "@/components/ui/checkbox";
import { toast } from "@/components/ui/use-toast";
import {
  shoppingListService,
  ShoppingListItem,
} from "@/lib/services/shopping-list-service";
import Link from "next/link";

export default function ShoppingList() {
  // State
  const [items, setItems] = useState<InventoryItem[]>([]);
  const [shoppingList, setShoppingList] = useState<ShoppingListItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [categories, setCategories] = useState<string[]>([]);
  const [showPurchased, setShowPurchased] = useState(false);
  const [newItemName, setNewItemName] = useState("");
  const [newItemQuantity, setNewItemQuantity] = useState(1);
  const [newItemUnit, setNewItemUnit] = useState("kg");
  const [newItemCategory, setNewItemCategory] = useState("");
  const [newItemCost, setNewItemCost] = useState(0);
  const [isAddingItem, setIsAddingItem] = useState(false);

  // Notifications
  const { success, error } = useNotificationHelpers();

  // Get currency formatter
  const { formatCurrency } = useCurrency();

  // Fetch inventory items and generate shopping list
  const fetchInventoryAndGenerateList = async () => {
    setIsLoading(true);
    try {
      // Get all inventory items
      const fetchedItems = await inventoryService.getItems();
      setItems(fetchedItems);

      // Get all categories
      const fetchedCategories = await inventoryService.getCategories();
      setCategories(fetchedCategories);

      // Get existing shopping list items
      const existingItems = await shoppingListService.getItems();

      // Generate new shopping list items based on low stock
      const generatedItems = await shoppingListService.generateList(
        fetchedItems
      );

      // Merge existing and generated items
      const manualItems = existingItems.filter(
        (item) => !item.isAutoGenerated && !item.isPurchased
      );

      // Merge purchased items (both auto and manual)
      const purchasedItems = existingItems.filter((item) => item.isPurchased);

      setShoppingList([...generatedItems, ...manualItems, ...purchasedItems]);
    } catch (err) {
      console.error("Error fetching inventory data:", err);
      error(
        "Failed to load inventory",
        "There was an error loading your inventory data."
      );
    } finally {
      setIsLoading(false);
    }
  };

  // Add a new item to the shopping list
  const handleAddItem = async () => {
    if (!newItemName.trim()) {
      error("Error", "Please enter an item name");
      return;
    }

    if (newItemQuantity <= 0) {
      error("Error", "Quantity must be greater than 0");
      return;
    }

    try {
      // Create a new shopping list item
      const newItem = await shoppingListService.addItem({
        inventoryItemId: "", // Empty for manual items
        name: newItemName,
        quantity: newItemQuantity,
        unit: newItemUnit,
        estimatedCost: newItemCost,
        category: newItemCategory || "Other",
        isAutoGenerated: false,
        isPurchased: false,
      });

      // Add to shopping list
      setShoppingList([...shoppingList, newItem]);

      // Reset form
      setNewItemName("");
      setNewItemQuantity(1);
      setNewItemUnit("kg");
      setNewItemCategory("");
      setNewItemCost(0);
      setIsAddingItem(false);

      // Show success message
      success("Item Added", "Item has been added to your shopping list");
    } catch (err) {
      console.error("Error adding item:", err);
      error(
        "Failed to add item",
        "There was an error adding the item to your shopping list"
      );
    }
  };

  // Mark an item as purchased
  const handleMarkAsPurchased = async (itemId: string) => {
    try {
      // Mark item as purchased in the service
      const updatedItem = await shoppingListService.markAsPurchased(itemId);

      // Update local state
      const updatedList = shoppingList.map((item) => {
        if (item.id === itemId) {
          return updatedItem;
        }
        return item;
      });

      setShoppingList(updatedList);

      // If the item has an inventory item ID, update inventory
      if (updatedItem.inventoryItemId) {
        await shoppingListService.updateInventory([updatedItem]);

        toast({
          title: "Item Purchased",
          description: `${updatedItem.name} has been marked as purchased and inventory has been updated.`,
        });
      } else {
        toast({
          title: "Item Purchased",
          description: `${updatedItem.name} has been marked as purchased.`,
        });
      }
    } catch (err) {
      console.error("Error marking item as purchased:", err);
      error(
        "Failed to mark item as purchased",
        "There was an error updating the item status."
      );
    }
  };

  // Remove an item from the shopping list
  const handleRemoveItem = async (itemId: string) => {
    try {
      // Remove item from the service
      await shoppingListService.removeItem(itemId);

      // Update local state
      const updatedList = shoppingList.filter((item) => item.id !== itemId);
      setShoppingList(updatedList);

      success("Item Removed", "Item has been removed from your shopping list");
    } catch (err) {
      console.error("Error removing item:", err);
      error(
        "Failed to remove item",
        "There was an error removing the item from your shopping list."
      );
    }
  };

  // Filter shopping list based on search term, category, and purchased status
  const filteredShoppingList = shoppingList.filter((item) => {
    const matchesSearch = item.name
      .toLowerCase()
      .includes(searchTerm.toLowerCase());
    const matchesCategory =
      selectedCategory === "all" || item.category === selectedCategory;
    const matchesPurchasedFilter = showPurchased ? true : !item.isPurchased;

    return matchesSearch && matchesCategory && matchesPurchasedFilter;
  });

  // Calculate total estimated cost
  const calculateTotalCost = () => {
    return filteredShoppingList.reduce(
      (total, item) => total + item.estimatedCost,
      0
    );
  };

  // Load items on component mount
  useEffect(() => {
    fetchInventoryAndGenerateList();
  }, []);

  // Loading state
  if (isLoading) {
    return (
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
          <div>
            <Skeleton className="h-8 w-48 mb-2" />
            <Skeleton className="h-4 w-64" />
          </div>
          <Skeleton className="h-9 w-36 mt-4 md:mt-0" />
        </div>

        <Card className="mb-6">
          <div className="flex flex-col md:flex-row md:items-center gap-4 p-4">
            <Skeleton className="h-10 flex-1" />
            <Skeleton className="h-10 w-full md:w-48" />
          </div>
        </Card>

        <Card>
          <div className="p-4">
            <Skeleton className="h-8 w-full mb-4" />
            {[...Array(5)].map((_, i) => (
              <Skeleton key={i} className="h-16 w-full mb-2" />
            ))}
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">
            Smart Reorder & Shopping List
          </h1>
          <p className="text-sm text-muted-foreground">
            {filteredShoppingList.length} items in your shopping list
          </p>
        </div>

        <div className="flex gap-2 mt-4 md:mt-0">
          <CurrencySelector />
          <Button
            variant="outline"
            size="sm"
            onClick={fetchInventoryAndGenerateList}
          >
            <FiRefreshCw className="mr-2 h-4 w-4" />
            Refresh
          </Button>
          <Link href="/inventory">
            <Button variant="outline" size="sm">
              <FiPackage className="mr-2 h-4 w-4" />
              Inventory
            </Button>
          </Link>
          <Button size="sm" onClick={() => setIsAddingItem(true)}>
            <FiPlus className="mr-2" />
            Add Item
          </Button>
        </div>
      </div>

      {/* Add Item Form */}
      {isAddingItem && (
        <Card className="mb-6 p-4">
          <h2 className="text-lg font-semibold mb-4">
            Add Item to Shopping List
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">
                Item Name
              </label>
              <Input
                type="text"
                placeholder="Enter item name"
                value={newItemName}
                onChange={(e) => setNewItemName(e.target.value)}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Category</label>
              <Select
                value={newItemCategory}
                onValueChange={(value) => setNewItemCategory(value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Select category</SelectItem>
                  {categories.map((category) => (
                    <SelectItem key={category} value={category}>
                      {category}
                    </SelectItem>
                  ))}
                  <SelectItem value="Other">Other</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Quantity</label>
              <Input
                type="number"
                min="0.1"
                step="0.1"
                value={newItemQuantity}
                onChange={(e) =>
                  setNewItemQuantity(parseFloat(e.target.value) || 0)
                }
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Unit</label>
              <Select
                value={newItemUnit}
                onValueChange={(value) => setNewItemUnit(value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select unit" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="kg">kg</SelectItem>
                  <SelectItem value="g">g</SelectItem>
                  <SelectItem value="L">L</SelectItem>
                  <SelectItem value="ml">ml</SelectItem>
                  <SelectItem value="pcs">pcs</SelectItem>
                  <SelectItem value="box">box</SelectItem>
                  <SelectItem value="bottle">bottle</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">
                Estimated Cost
              </label>
              <Input
                type="number"
                min="0"
                step="0.01"
                value={newItemCost}
                onChange={(e) =>
                  setNewItemCost(parseFloat(e.target.value) || 0)
                }
              />
            </div>
          </div>
          <div className="flex justify-end gap-2 mt-4">
            <Button variant="outline" onClick={() => setIsAddingItem(false)}>
              Cancel
            </Button>
            <Button onClick={handleAddItem}>
              <FiPlus className="mr-2" />
              Add to List
            </Button>
          </div>
        </Card>
      )}

      {/* Filters */}
      <Card className="mb-6">
        <div className="flex flex-col md:flex-row md:items-center gap-4 p-4">
          <div className="flex-1 relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FiSearch className="h-5 w-5 text-muted-foreground" />
            </div>
            <Input
              type="text"
              className="pl-10"
              placeholder="Search shopping list..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          <div className="w-full md:w-48">
            <Select
              value={selectedCategory}
              onValueChange={(value) => setSelectedCategory(value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                {categories.map((category) => (
                  <SelectItem key={category} value={category}>
                    {category}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="showPurchased"
              checked={showPurchased}
              onCheckedChange={(checked) => setShowPurchased(!!checked)}
            />
            <label
              htmlFor="showPurchased"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Show purchased items
            </label>
          </div>
        </div>
      </Card>

      {/* Shopping List */}
      <Tabs defaultValue="list" className="w-full">
        <TabsList className="mb-6">
          <TabsTrigger value="list" className="flex items-center gap-2">
            <FiShoppingCart className="h-4 w-4" />
            Shopping List
          </TabsTrigger>
          <TabsTrigger value="summary" className="flex items-center gap-2">
            <FiFilter className="h-4 w-4" />
            Summary
          </TabsTrigger>
        </TabsList>

        <TabsContent value="list">
          <Card>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-12"></TableHead>
                    <TableHead>Item</TableHead>
                    <TableHead>Category</TableHead>
                    <TableHead>Quantity</TableHead>
                    <TableHead>Estimated Cost</TableHead>
                    <TableHead>Source</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredShoppingList.length === 0 ? (
                    <TableRow>
                      <TableCell
                        colSpan={7}
                        className="text-center py-8 text-muted-foreground"
                      >
                        No items found in your shopping list.
                      </TableCell>
                    </TableRow>
                  ) : (
                    filteredShoppingList.map((item) => (
                      <TableRow
                        key={item.id}
                        className={
                          item.isPurchased
                            ? "bg-green-50 dark:bg-green-950/20"
                            : ""
                        }
                      >
                        <TableCell>
                          <Checkbox
                            checked={item.isPurchased}
                            onCheckedChange={() => {
                              if (!item.isPurchased) {
                                handleMarkAsPurchased(item.id);
                              }
                            }}
                            disabled={item.isPurchased}
                          />
                        </TableCell>
                        <TableCell className="font-medium">
                          {item.name}
                          {item.isPurchased && (
                            <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                              Purchased
                            </span>
                          )}
                        </TableCell>
                        <TableCell>{item.category}</TableCell>
                        <TableCell>
                          {item.quantity} {item.unit}
                        </TableCell>
                        <TableCell>
                          {formatCurrency(item.estimatedCost)}
                        </TableCell>
                        <TableCell>
                          {item.isAutoGenerated ? (
                            <Badge variant="secondary">Auto-generated</Badge>
                          ) : (
                            <Badge variant="outline">Manual</Badge>
                          )}
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end gap-1">
                            {!item.isPurchased && (
                              <>
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  className="h-8 w-8 text-green-600"
                                  onClick={() => handleMarkAsPurchased(item.id)}
                                  title="Mark as purchased"
                                >
                                  <FiCheck className="h-4 w-4" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  className="h-8 w-8 text-red-600"
                                  onClick={() => handleRemoveItem(item.id)}
                                  title="Remove item"
                                >
                                  <FiTrash2 className="h-4 w-4" />
                                </Button>
                              </>
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
            <div className="p-4 border-t">
              <div className="flex justify-between items-center">
                <div>
                  <span className="text-sm text-muted-foreground">
                    Total Items: {filteredShoppingList.length}
                  </span>
                </div>
                <div className="text-lg font-bold">
                  Total: {formatCurrency(calculateTotalCost())}
                </div>
              </div>
            </div>
          </Card>
        </TabsContent>

        <TabsContent value="summary">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="p-6">
              <h3 className="text-lg font-semibold mb-4">
                Shopping List Summary
              </h3>
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span>Total Items:</span>
                  <span className="font-medium">{shoppingList.length}</span>
                </div>
                <div className="flex justify-between">
                  <span>Items to Purchase:</span>
                  <span className="font-medium">
                    {shoppingList.filter((item) => !item.isPurchased).length}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Items Purchased:</span>
                  <span className="font-medium">
                    {shoppingList.filter((item) => item.isPurchased).length}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Auto-generated Items:</span>
                  <span className="font-medium">
                    {shoppingList.filter((item) => item.isAutoGenerated).length}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span>Manual Items:</span>
                  <span className="font-medium">
                    {
                      shoppingList.filter((item) => !item.isAutoGenerated)
                        .length
                    }
                  </span>
                </div>
                <div className="pt-4 border-t">
                  <div className="flex justify-between">
                    <span className="font-semibold">Total Estimated Cost:</span>
                    <span className="font-bold">
                      {formatCurrency(
                        shoppingList.reduce(
                          (total, item) => total + item.estimatedCost,
                          0
                        )
                      )}
                    </span>
                  </div>
                </div>
              </div>
            </Card>

            <Card className="p-6">
              <h3 className="text-lg font-semibold mb-4">Category Breakdown</h3>
              <div className="space-y-4">
                {categories
                  .filter((category) =>
                    shoppingList.some(
                      (item) => item.category === category && !item.isPurchased
                    )
                  )
                  .map((category) => {
                    const categoryItems = shoppingList.filter(
                      (item) => item.category === category && !item.isPurchased
                    );
                    const categoryTotal = categoryItems.reduce(
                      (total, item) => total + item.estimatedCost,
                      0
                    );

                    return (
                      <div
                        key={category}
                        className="flex justify-between items-center"
                      >
                        <div>
                          <div className="font-medium">{category}</div>
                          <div className="text-sm text-muted-foreground">
                            {categoryItems.length} items
                          </div>
                        </div>
                        <div className="font-medium">
                          {formatCurrency(categoryTotal)}
                        </div>
                      </div>
                    );
                  })}
              </div>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}
