"use client";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2, Plus, RefreshCw, Search } from "lucide-react";
import { useCurrency } from "@/lib/currency";
import { SwitchWithLabel } from "@/components/ui/switch-with-label";

interface ShoppingListHeaderProps {
  onAddItem: () => void;
  onGenerateList: () => Promise<void>;
  isGenerating: boolean;
  searchTerm: string;
  onSearchChange: (value: string) => void;
  selectedCategory: string;
  onCategoryChange: (value: string) => void;
  categories: string[];
  totalEstimatedCost: number;
  itemsCount?: {
    total: number;
    purchased: number;
    urgent: number;
    autoGenerated: number;
  };
  showPurchased?: boolean;
  onToggleShowPurchased?: () => void;
  sortBy?: string;
  onSortChange?: (value: string) => void;
  filterBy?: string;
  onFilterChange?: (value: string) => void;
}

export default function ShoppingListHeader({
  onAddItem,
  onGenerateList,
  isGenerating,
  searchTerm,
  onSearchChange,
  selectedCategory,
  onCategoryChange,
  categories,
  totalEstimatedCost,
  itemsCount = {
    total: 0,
    purchased: 0,
    urgent: 0,
    autoGenerated: 0,
  },
  showPurchased = false,
  onToggleShowPurchased = () => {},
  sortBy = "date",
  onSortChange = () => {},
  filterBy = "all",
  onFilterChange = () => {},
}: ShoppingListHeaderProps) {
  const { formatCurrency } = useCurrency();
  const progress =
    itemsCount.total > 0
      ? Math.round((itemsCount.purchased / itemsCount.total) * 100)
      : 0;

  return (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
        {/* Total Items */}
        <div className="bg-white rounded-lg border shadow-xs p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-muted-foreground">
                Total Items
              </p>
              <h3 className="text-2xl font-bold mt-1">{itemsCount.total}</h3>
            </div>
            <div className="h-10 w-10 bg-blue-50 rounded-full flex items-center justify-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="text-blue-600"
              >
                <path d="M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                <line x1="3" y1="6" x2="21" y2="6"></line>
                <path d="M16 10a4 4 0 0 1-8 0"></path>
              </svg>
            </div>
          </div>
          <div className="mt-2">
            <div className="flex items-center justify-between text-xs">
              <span className="text-muted-foreground">Purchased</span>
              <span className="font-medium">{itemsCount.purchased} items</span>
            </div>
          </div>
        </div>

        {/* Estimated Cost */}
        <div className="bg-white rounded-lg border shadow-xs p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-muted-foreground">
                Est. Cost
              </p>
              <h3 className="text-2xl font-bold mt-1">
                {formatCurrency(totalEstimatedCost)}
              </h3>
            </div>
            <div className="h-10 w-10 bg-green-50 rounded-full flex items-center justify-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="text-green-600"
              >
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="16"></line>
                <line x1="8" y1="12" x2="16" y2="12"></line>
              </svg>
            </div>
          </div>
          <div className="mt-2">
            <div className="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
              <div
                className="h-full bg-green-500 rounded-full"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <div className="flex justify-between mt-1 text-xs">
              <span className="text-muted-foreground">Progress</span>
              <span className="font-medium">{progress}%</span>
            </div>
          </div>
        </div>

        {/* Urgent Items */}
        <div className="bg-white rounded-lg border shadow-xs p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-muted-foreground">
                Urgent
              </p>
              <h3 className="text-2xl font-bold mt-1">{itemsCount.urgent}</h3>
            </div>
            <div className="h-10 w-10 bg-red-50 rounded-full flex items-center justify-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="text-red-600"
              >
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
            </div>
          </div>
          <div className="mt-2">
            <div className="flex items-center justify-between text-xs">
              <span className="text-muted-foreground">Items to prioritize</span>
              <span className="font-medium text-red-600">
                {((itemsCount.urgent / itemsCount.total) * 100).toFixed(0)}%
              </span>
            </div>
          </div>
        </div>

        {/* Auto-Generated */}
        <div className="bg-white rounded-lg border shadow-xs p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-muted-foreground">
                Auto-Generated
              </p>
              <h3 className="text-2xl font-bold mt-1">
                {itemsCount.autoGenerated}
              </h3>
            </div>
            <div className="h-10 w-10 bg-purple-50 rounded-full flex items-center justify-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="text-purple-600"
              >
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                <line x1="9" y1="3" x2="9" y2="21"></line>
              </svg>
            </div>
          </div>
          <div className="mt-2">
            <div className="flex items-center justify-between text-xs">
              <span className="text-muted-foreground">From inventory</span>
              <span className="font-medium">
                {((itemsCount.autoGenerated / itemsCount.total) * 100).toFixed(
                  0
                )}
                %
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Search, Filters and Actions Bar */}
      <div className="flex flex-col gap-4 sm:flex-row sm:items-center justify-between bg-white rounded-lg border shadow-xs p-4">
        <div className="flex flex-1 space-x-2">
          <div className="relative flex-1 max-w-md">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search items..."
              value={searchTerm}
              onChange={(e) => onSearchChange(e.target.value)}
              className="pl-9 h-9"
            />
          </div>
          <div className="flex-1 max-w-[200px]">
            <Select value={selectedCategory} onValueChange={onCategoryChange}>
              <SelectTrigger className="h-9">
                <SelectValue placeholder="All Categories" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                {categories.map((category) => (
                  <SelectItem key={category} value={category}>
                    {category}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="flex flex-col sm:flex-row gap-2 sm:items-center">
          <div className="flex items-center space-x-2 mr-4 p-1">
            <SwitchWithLabel
              id="showPurchased"
              checked={showPurchased}
              onCheckedChange={onToggleShowPurchased}
              label="Show Purchased"
              description="Mark as a preferred supplier"
            />
          </div>
          <div className="flex gap-2">
            <Button onClick={onAddItem} size="sm" className="h-9">
              <Plus className="mr-2 h-4 w-4" />
              Add Item
            </Button>
            <Button
              onClick={onGenerateList}
              disabled={isGenerating}
              variant="outline"
              size="sm"
              className="h-9"
            >
              {isGenerating ? (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              ) : (
                <RefreshCw className="mr-2 h-4 w-4" />
              )}
              Generate
            </Button>
          </div>
        </div>
      </div>

      {/* Sorting and Additional Filtering */}
      <div className="flex flex-wrap items-center justify-between gap-4 bg-muted/20 rounded-lg border px-4 py-3">
        <div className="flex items-center gap-2">
          <span className="text-sm text-muted-foreground">Sort by:</span>
          <Select value={sortBy} onValueChange={onSortChange}>
            <SelectTrigger className="h-8 border-none bg-transparent shadow-none w-[110px] focus:ring-0">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="date">Date Added</SelectItem>
              <SelectItem value="name">Name</SelectItem>
              <SelectItem value="cost">Est. Cost</SelectItem>
              <SelectItem value="urgency">Urgency</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="flex items-center gap-2">
          <span className="text-sm text-muted-foreground">Filter:</span>
          <Select value={filterBy} onValueChange={onFilterChange}>
            <SelectTrigger className="h-8 border-none bg-transparent shadow-none w-[120px] focus:ring-0">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Items</SelectItem>
              <SelectItem value="pending">Not Purchased</SelectItem>
              <SelectItem value="purchased">Purchased</SelectItem>
              <SelectItem value="urgent">Urgent Only</SelectItem>
              <SelectItem value="auto">Auto-Generated</SelectItem>
              <SelectItem value="manual">Manually Added</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
    </div>
  );
}
