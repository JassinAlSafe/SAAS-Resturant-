"use client";

import { useCurrency } from "@/lib/currency";
import { ShoppingListItem } from "@/lib/types";
import { Progress } from "@/components/ui/progress";
import {
  FiShoppingBag,
  FiTrendingUp,
  FiAlertCircle,
  FiCheckCircle,
} from "react-icons/fi";
import { LuCoins, LuScanLine } from "react-icons/lu";
import { cn } from "@/lib/utils";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Badge } from "@/components/ui/badge";

interface ShoppingListSummaryProps {
  items: ShoppingListItem[];
}

export default function ShoppingListSummary({
  items,
}: ShoppingListSummaryProps) {
  const { formatCurrency } = useCurrency();

  // Calculate total cost
  const totalCost = items.reduce(
    (sum, item) => sum + (item.estimatedCost || 0),
    0
  );

  // Cost of pending items (not yet purchased)
  const pendingCost = items
    .filter((item) => !item.isPurchased)
    .reduce((sum, item) => sum + (item.estimatedCost || 0), 0);

  // Count active items (not purchased)
  const activeItems = items.filter((item) => !item.isPurchased).length;

  // Count purchased items
  const purchasedItems = items.filter((item) => item.isPurchased).length;

  // Count urgent items
  const urgentItems = items.filter(
    (item) => item.isUrgent && !item.isPurchased
  ).length;

  // Count auto-generated items
  const autoGeneratedItems = items.filter(
    (item) => item.isAutoGenerated
  ).length;

  // Calculate percentage complete
  const totalItems = items.length;
  const percentComplete =
    totalItems > 0 ? Math.round((purchasedItems / totalItems) * 100) : 0;

  // Get progress color based on percentage
  const getProgressColor = (percent: number) => {
    if (percent < 25) return "bg-red-500";
    if (percent < 50) return "bg-amber-500";
    if (percent < 75) return "bg-blue-500";
    return "bg-green-500";
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-xl font-semibold">Shopping List Summary</h3>
        <div className="flex items-center space-x-2">
          {urgentItems > 0 && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger>
                  <Badge
                    variant="destructive"
                    className="flex items-center gap-1"
                  >
                    <FiAlertCircle className="h-3.5 w-3.5" />
                    {urgentItems} urgent
                  </Badge>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{urgentItems} items marked as urgent</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}

          {autoGeneratedItems > 0 && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger>
                  <Badge
                    variant="outline"
                    className="bg-blue-50 text-blue-700 border-blue-200 flex items-center gap-1"
                  >
                    <LuScanLine className="h-3.5 w-3.5" />
                    {autoGeneratedItems} auto-generated
                  </Badge>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{autoGeneratedItems} items were automatically generated</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="overflow-hidden border-0 shadow-md bg-gradient-to-br from-primary/5 to-primary/10">
          <CardHeader className="pb-2">
            <div className="flex items-center gap-2 text-primary">
              <LuCoins className="h-5 w-5" />
              <CardTitle className="text-base font-medium">
                Estimated Costs
              </CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col gap-1">
              <div className="flex items-baseline">
                <p className="text-3xl font-bold">
                  {formatCurrency(totalCost)}
                </p>
                <span className="text-sm text-muted-foreground ml-2">
                  total
                </span>
              </div>
              <div className="text-sm text-muted-foreground">
                {pendingCost > 0 && (
                  <span className="font-medium text-primary">
                    {formatCurrency(pendingCost)} pending
                  </span>
                )}
              </div>
            </div>
          </CardContent>
          <CardFooter className="bg-primary/5 py-2 px-6 border-t border-primary/10">
            <div className="flex items-center justify-between w-full text-xs">
              <span className="text-muted-foreground">Average per item:</span>
              <span className="font-medium">
                {totalItems > 0
                  ? formatCurrency(totalCost / totalItems)
                  : formatCurrency(0)}
              </span>
            </div>
          </CardFooter>
        </Card>

        <Card className="overflow-hidden border-0 shadow-md bg-gradient-to-br from-blue-50/70 to-blue-50/90">
          <CardHeader className="pb-2">
            <div className="flex items-center gap-2 text-blue-700">
              <FiShoppingBag className="h-5 w-5" />
              <CardTitle className="text-base font-medium">
                Shopping Status
              </CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <div className="flex justify-between items-baseline">
              <div>
                <p className="text-3xl font-bold">{activeItems}</p>
                <p className="text-sm text-blue-700/70">items remaining</p>
              </div>

              <div className="text-right">
                <p className="text-3xl font-bold">{purchasedItems}</p>
                <p className="text-sm text-green-700/70">items purchased</p>
              </div>
            </div>
          </CardContent>
          <CardFooter className="bg-blue-50/90 py-2 px-6 border-t border-blue-100">
            <div className="w-full flex items-center justify-between text-xs">
              <span className="text-muted-foreground">Total items:</span>
              <div className="flex items-center gap-1.5">
                <span className="font-medium">{totalItems}</span>
                {urgentItems > 0 && (
                  <Badge
                    variant="outline"
                    className="bg-red-50 text-red-700 border-red-200 text-[10px] px-1 py-0"
                  >
                    {urgentItems} urgent
                  </Badge>
                )}
              </div>
            </div>
          </CardFooter>
        </Card>

        <Card className="overflow-hidden border-0 shadow-md bg-gradient-to-br from-green-50/70 to-green-50/90">
          <CardHeader className="pb-2">
            <div className="flex items-center gap-2 text-green-700">
              <FiTrendingUp className="h-5 w-5" />
              <CardTitle className="text-base font-medium">
                Purchase Progress
              </CardTitle>
            </div>
            <CardDescription className="text-xs text-green-700/70">
              {percentComplete}% complete
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-1.5">
                  <FiCheckCircle
                    className={cn(
                      "h-4 w-4",
                      percentComplete === 100
                        ? "text-green-600"
                        : "text-muted-foreground"
                    )}
                  />
                  <span
                    className={cn(
                      "text-sm font-medium",
                      percentComplete === 100
                        ? "text-green-700"
                        : "text-muted-foreground"
                    )}
                  >
                    {purchasedItems} of {totalItems} items purchased
                  </span>
                </div>
              </div>

              <div className="relative pt-2">
                <Progress
                  value={percentComplete}
                  className="h-3 rounded-full bg-green-100"
                  indicatorClassName={cn(
                    "rounded-full transition-all",
                    getProgressColor(percentComplete)
                  )}
                />

                <div className="absolute inset-0 flex items-center justify-center">
                  <span className="text-[10px] font-bold text-white drop-shadow-sm">
                    {percentComplete}%
                  </span>
                </div>

                <div className="flex justify-between mt-2 text-xs text-muted-foreground">
                  <span>0%</span>
                  <span>50%</span>
                  <span>100%</span>
                </div>
              </div>
            </div>
          </CardContent>
          <CardFooter className="bg-green-50/90 py-2 px-6 border-t border-green-100">
            <div className="w-full flex items-center justify-between text-xs">
              <span className="text-muted-foreground">
                Estimated completion:
              </span>
              <span className="font-medium">
                {percentComplete < 100
                  ? `${activeItems} items remaining`
                  : "All items purchased!"}
              </span>
            </div>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
}
