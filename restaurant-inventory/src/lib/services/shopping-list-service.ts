import { InventoryItem } from "@/lib/types";

// Define the shopping list item type
export interface ShoppingListItem {
    id: string;
    inventoryItemId: string;
    name: string;
    quantity: number;
    unit: string;
    estimatedCost: number;
    category: string;
    isAutoGenerated: boolean;
    isPurchased: boolean;
    addedAt: string;
    purchasedAt?: string;
}

// Mock data for shopping list
const mockShoppingList: ShoppingListItem[] = [
    {
        id: "sl-1",
        inventoryItemId: "inv-1",
        name: "Flour",
        quantity: 10,
        unit: "kg",
        estimatedCost: 25.0,
        category: "Dry Goods",
        isAutoGenerated: true,
        isPurchased: false,
        addedAt: new Date().toISOString(),
    },
    {
        id: "sl-2",
        inventoryItemId: "inv-2",
        name: "Sugar",
        quantity: 5,
        unit: "kg",
        estimatedCost: 15.0,
        category: "Dry Goods",
        isAutoGenerated: true,
        isPurchased: false,
        addedAt: new Date().toISOString(),
    },
    {
        id: "sl-3",
        inventoryItemId: "inv-3",
        name: "Olive Oil",
        quantity: 3,
        unit: "L",
        estimatedCost: 45.0,
        category: "Oils & Condiments",
        isAutoGenerated: false,
        isPurchased: false,
        addedAt: new Date().toISOString(),
    },
];

// Shopping list service
export const shoppingListService = {
    // Get all shopping list items
    getItems: async (): Promise<ShoppingListItem[]> => {
        // In a real app, this would be an API call
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve(mockShoppingList);
            }, 500);
        });
    },

    // Generate shopping list based on inventory items
    generateList: async (inventoryItems: InventoryItem[]): Promise<ShoppingListItem[]> => {
        // In a real app, this would be an API call
        return new Promise((resolve) => {
            setTimeout(() => {
                // Find items that are below or at reorder level
                const lowStockItems = inventoryItems.filter(
                    (item) => item.quantity <= item.reorderLevel
                );

                // Create shopping list items from low stock items
                const autoGeneratedItems = lowStockItems.map((item) => {
                    // Calculate how much to order (reorderLevel * 2 - current quantity)
                    const orderQuantity = Math.max(
                        Math.round((item.reorderLevel * 2 - item.quantity) * 10) / 10,
                        0
                    );

                    return {
                        id: `auto-${item.id}-${Date.now()}`,
                        inventoryItemId: item.id,
                        name: item.name,
                        quantity: orderQuantity,
                        unit: item.unit,
                        estimatedCost: item.cost_per_unit * orderQuantity,
                        category: item.category,
                        isAutoGenerated: true,
                        isPurchased: false,
                        addedAt: new Date().toISOString(),
                    };
                });

                resolve(autoGeneratedItems);
            }, 500);
        });
    },

    // Add a new item to the shopping list
    addItem: async (item: Omit<ShoppingListItem, "id" | "addedAt">): Promise<ShoppingListItem> => {
        // In a real app, this would be an API call
        return new Promise((resolve) => {
            setTimeout(() => {
                const newItem: ShoppingListItem = {
                    ...item,
                    id: `manual-${Date.now()}`,
                    addedAt: new Date().toISOString(),
                };
                resolve(newItem);
            }, 300);
        });
    },

    // Mark an item as purchased
    markAsPurchased: async (itemId: string): Promise<ShoppingListItem> => {
        // In a real app, this would be an API call
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const item = mockShoppingList.find((item) => item.id === itemId);
                if (!item) {
                    reject(new Error("Item not found"));
                    return;
                }

                const updatedItem: ShoppingListItem = {
                    ...item,
                    isPurchased: true,
                    purchasedAt: new Date().toISOString(),
                };

                resolve(updatedItem);
            }, 300);
        });
    },

    // Remove an item from the shopping list
    removeItem: async (itemId: string): Promise<void> => {
        // In a real app, this would be an API call
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, 300);
        });
    },

    // Update inventory based on purchased items
    updateInventory: async (purchasedItems: ShoppingListItem[]): Promise<void> => {
        // In a real app, this would be an API call
        return new Promise((resolve) => {
            setTimeout(() => {
                // Logic to update inventory would go here
                resolve();
            }, 500);
        });
    },
}; 