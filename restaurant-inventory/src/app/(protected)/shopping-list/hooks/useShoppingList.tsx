"use client";

import { useState, useEffect } from "react";
import { InventoryItem } from "@/lib/types";
import {
  shoppingListService,
  ShoppingListItem,
} from "@/lib/services/shopping-list-service";
import { inventoryService } from "@/lib/services/inventory-service";
import { useNotificationHelpers } from "@/lib/notification-context";
import { toast } from "@/components/ui/use-toast";

export function useShoppingList() {
  // State
  const [items, setItems] = useState<InventoryItem[]>([]);
  const [shoppingList, setShoppingList] = useState<ShoppingListItem[]>([]);
  const [categories, setCategories] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Notifications
  const { success, error: showError } = useNotificationHelpers();

  // Fetch inventory items and generate shopping list
  const fetchInventoryAndGenerateList = async () => {
    setIsLoading(true);
    setError(null);
    try {
      // Get all inventory items
      const fetchedItems = await inventoryService.getItems();
      setItems(fetchedItems);

      // Get all categories
      const fetchedCategories = await inventoryService.getCategories();
      setCategories(fetchedCategories);

      // Get existing shopping list items
      const existingItems = await shoppingListService.getItems();

      // Generate new shopping list items based on low stock
      const generatedItems = await shoppingListService.generateList(
        fetchedItems
      );

      // Merge existing and generated items
      const manualItems = existingItems.filter(
        (item) => !item.isAutoGenerated && !item.isPurchased
      );

      // Merge purchased items (both auto and manual)
      const purchasedItems = existingItems.filter((item) => item.isPurchased);

      setShoppingList([...generatedItems, ...manualItems, ...purchasedItems]);
    } catch (err) {
      console.error("Error fetching inventory data:", err);
      setError("Failed to load inventory data. Please try again later.");
      showError(
        "Failed to load inventory",
        "There was an error loading your inventory data."
      );
    } finally {
      setIsLoading(false);
    }
  };

  // Add a new item to the shopping list
  const addItem = async (
    itemData: Omit<ShoppingListItem, "id" | "addedAt">
  ) => {
    try {
      // Create a new shopping list item
      const newItem = await shoppingListService.addItem(itemData);

      // Add to shopping list
      setShoppingList((prev) => [...prev, newItem]);

      // Show success message
      success("Item Added", "Item has been added to your shopping list");

      return newItem;
    } catch (err) {
      console.error("Error adding item:", err);
      showError(
        "Failed to add item",
        "There was an error adding the item to your shopping list"
      );
      return null;
    }
  };

  // Mark an item as purchased
  const markAsPurchased = async (itemId: string) => {
    try {
      // Mark item as purchased in the service
      const updatedItem = await shoppingListService.markAsPurchased(itemId);

      // Update local state
      setShoppingList((prev) =>
        prev.map((item) => (item.id === itemId ? updatedItem : item))
      );

      // If the item has an inventory item ID, update inventory
      if (updatedItem.inventoryItemId) {
        await shoppingListService.updateInventory([updatedItem]);

        toast({
          title: "Item Purchased",
          description: `${updatedItem.name} has been marked as purchased and inventory has been updated.`,
        });
      } else {
        toast({
          title: "Item Purchased",
          description: `${updatedItem.name} has been marked as purchased.`,
        });
      }

      return updatedItem;
    } catch (err) {
      console.error("Error marking item as purchased:", err);

      // Get a more specific error message if available
      const errorMessage =
        err instanceof Error
          ? err.message
          : "There was an error updating the item status.";

      showError("Failed to mark item as purchased", errorMessage);

      // Refresh the shopping list to ensure UI is in sync with backend
      fetchInventoryAndGenerateList();

      return null;
    }
  };

  // Remove an item from the shopping list
  const removeItem = async (itemId: string) => {
    try {
      // Remove item from the service
      await shoppingListService.removeItem(itemId);

      // Update local state
      setShoppingList((prev) => prev.filter((item) => item.id !== itemId));

      success("Item Removed", "Item has been removed from your shopping list");
      return true;
    } catch (err) {
      console.error("Error removing item:", err);
      showError(
        "Failed to remove item",
        "There was an error removing the item from your shopping list."
      );
      return false;
    }
  };

  // Calculate total cost
  const calculateTotalCost = (list: ShoppingListItem[] = shoppingList) => {
    return list.reduce((total, item) => total + item.estimatedCost, 0);
  };

  // Load data on hook initialization
  useEffect(() => {
    fetchInventoryAndGenerateList();
  }, []);

  return {
    items,
    shoppingList,
    categories,
    isLoading,
    error,
    fetchInventoryAndGenerateList,
    addItem,
    markAsPurchased,
    removeItem,
    calculateTotalCost,
  };
}
