"use client";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Loader2,
  Plus,
  RefreshCw,
  Search,
  ShoppingBag,
  CircleDollarSign,
  AlertCircle,
  LayoutTemplate,
} from "lucide-react";
import { useCurrency } from "@/lib/currency";
import { SwitchWithLabel } from "@/components/ui/switch-with-label";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface ItemCounts {
  total: number;
  purchased: number;
  urgent: number;
  autoGenerated: number;
}

interface ShoppingListHeaderProps {
  onAddItem: () => void;
  onGenerateList: () => Promise<void>;
  isGenerating: boolean;
  searchTerm: string;
  onSearchChange: (value: string) => void;
  selectedCategory: string;
  onCategoryChange: (value: string) => void;
  categories: string[];
  totalEstimatedCost: number;
  itemsCount?: ItemCounts;
  showPurchased?: boolean;
  onToggleShowPurchased?: () => void;
  sortBy?: string;
  onSortChange?: (value: string) => void;
  filterBy?: string;
  onFilterChange?: (value: string) => void;
}

/**
 * A summary card that displays shopping list statistics
 */
function StatCard({
  title,
  value,
  icon: Icon,
  iconColor,
  iconBgColor,
  details,
  detailValue,
  detailLabel,
  showProgress,
  progressValue = 0,
}: {
  title: string;
  value: string | number;
  icon: React.ElementType;
  iconColor: string;
  iconBgColor: string;
  details?: React.ReactNode;
  detailValue?: string | number;
  detailLabel?: string;
  showProgress?: boolean;
  progressValue?: number;
}) {
  return (
    <Card className="border shadow-sm">
      <CardContent className="p-4">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-muted-foreground">{title}</p>
            <h3 className="text-2xl font-bold mt-1">{value}</h3>
          </div>
          <div
            className={`h-10 w-10 ${iconBgColor} rounded-full flex items-center justify-center`}
          >
            <Icon className={`h-5 w-5 ${iconColor}`} />
          </div>
        </div>
        <div className="mt-2">
          {showProgress && (
            <>
              <div className="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
                <div
                  className="h-full bg-green-500 rounded-full transition-all duration-300"
                  style={{ width: `${progressValue}%` }}
                  aria-valuenow={progressValue}
                  aria-valuemin={0}
                  aria-valuemax={100}
                  role="progressbar"
                ></div>
              </div>
              <div className="flex justify-between mt-1 text-xs">
                <span className="text-muted-foreground">Progress</span>
                <span className="font-medium">{progressValue}%</span>
              </div>
            </>
          )}
          {details && (
            <div className="flex items-center justify-between text-xs mt-1">
              <span className="text-muted-foreground">{detailLabel}</span>
              <span className="font-medium">{detailValue}</span>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

export default function ShoppingListHeader({
  onAddItem,
  onGenerateList,
  isGenerating,
  searchTerm,
  onSearchChange,
  selectedCategory,
  onCategoryChange,
  categories,
  totalEstimatedCost,
  itemsCount = {
    total: 0,
    purchased: 0,
    urgent: 0,
    autoGenerated: 0,
  },
  showPurchased = false,
  onToggleShowPurchased = () => {},
  sortBy = "date",
  onSortChange = () => {},
  filterBy = "all",
  onFilterChange = () => {},
}: ShoppingListHeaderProps) {
  const { formatCurrency } = useCurrency();
  const progress =
    itemsCount.total > 0
      ? Math.round((itemsCount.purchased / itemsCount.total) * 100)
      : 0;

  const urgentPercentage =
    itemsCount.total > 0
      ? Math.round((itemsCount.urgent / itemsCount.total) * 100)
      : 0;

  const autoPercentage =
    itemsCount.total > 0
      ? Math.round((itemsCount.autoGenerated / itemsCount.total) * 100)
      : 0;

  // Filter options with counts
  const filterOptions = [
    { value: "all", label: "All Items", count: itemsCount.total },
    {
      value: "pending",
      label: "Not Purchased",
      count: itemsCount.total - itemsCount.purchased,
    },
    { value: "purchased", label: "Purchased", count: itemsCount.purchased },
    { value: "urgent", label: "Urgent Only", count: itemsCount.urgent },
    { value: "auto", label: "Auto-Generated", count: itemsCount.autoGenerated },
    {
      value: "manual",
      label: "Manually Added",
      count: itemsCount.total - itemsCount.autoGenerated,
    },
  ];

  return (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
        <StatCard
          title="Total Items"
          value={itemsCount.total}
          icon={ShoppingBag}
          iconColor="text-blue-600"
          iconBgColor="bg-blue-50"
          detailLabel="Purchased"
          detailValue={`${itemsCount.purchased} items`}
        />

        <StatCard
          title="Est. Cost"
          value={formatCurrency(totalEstimatedCost)}
          icon={CircleDollarSign}
          iconColor="text-green-600"
          iconBgColor="bg-green-50"
          showProgress={true}
          progressValue={progress}
        />

        <StatCard
          title="Urgent"
          value={itemsCount.urgent}
          icon={AlertCircle}
          iconColor="text-red-600"
          iconBgColor="bg-red-50"
          detailLabel="Items to prioritize"
          detailValue={`${urgentPercentage}%`}
        />

        <StatCard
          title="Auto-Generated"
          value={itemsCount.autoGenerated}
          icon={LayoutTemplate}
          iconColor="text-purple-600"
          iconBgColor="bg-purple-50"
          detailLabel="From inventory"
          detailValue={`${autoPercentage}%`}
        />
      </div>

      {/* Search, Filters and Actions Bar */}
      <Card className="border shadow-sm">
        <CardContent className="p-4">
          <div className="flex flex-col gap-4 sm:flex-row sm:items-center justify-between">
            <div className="flex flex-1 space-x-2">
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search items..."
                  value={searchTerm}
                  onChange={(e) => onSearchChange(e.target.value)}
                  className="pl-9 h-10"
                  aria-label="Search items"
                />
              </div>
              <div className="flex-1 max-w-[200px]">
                <Select
                  value={selectedCategory}
                  onValueChange={onCategoryChange}
                >
                  <SelectTrigger
                    className="h-10"
                    aria-label="Filter by category"
                  >
                    <SelectValue placeholder="All Categories" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Categories</SelectItem>
                    {categories.map((category) => (
                      <SelectItem key={category} value={category}>
                        {category}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row gap-2 sm:items-center">
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <div className="flex items-center space-x-2 mr-4 p-1">
                      <SwitchWithLabel
                        id="showPurchased"
                        checked={showPurchased}
                        onCheckedChange={onToggleShowPurchased}
                        label="Show Purchased"
                      />
                    </div>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Toggle visibility of purchased items</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>

              <div className="flex gap-2">
                <Button
                  onClick={onAddItem}
                  variant="default"
                  size="sm"
                  className="h-10"
                >
                  <Plus className="mr-2 h-4 w-4" />
                  Add Item
                </Button>
                <Button
                  onClick={onGenerateList}
                  disabled={isGenerating}
                  variant="outline"
                  size="sm"
                  className="h-10"
                >
                  {isGenerating ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <RefreshCw className="mr-2 h-4 w-4" />
                  )}
                  Generate
                </Button>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Sorting and Additional Filtering */}
      <Card className="bg-muted/20 border">
        <CardContent className="px-4 py-3">
          <div className="flex flex-wrap items-center justify-between gap-4">
            <div className="flex items-center gap-2">
              <span className="text-sm text-muted-foreground">Sort by:</span>
              <Select value={sortBy} onValueChange={onSortChange}>
                <SelectTrigger
                  className="h-8 border-none bg-transparent shadow-none w-[110px] focus:ring-0"
                  aria-label="Sort items by"
                >
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="date">Date Added</SelectItem>
                  <SelectItem value="name">Name</SelectItem>
                  <SelectItem value="cost">Est. Cost</SelectItem>
                  <SelectItem value="urgency">Urgency</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-center gap-2">
              <span className="text-sm text-muted-foreground">Filter:</span>
              <Select value={filterBy} onValueChange={onFilterChange}>
                <SelectTrigger
                  className="h-8 border-none bg-transparent shadow-none w-[120px] focus:ring-0"
                  aria-label="Filter items"
                >
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {filterOptions.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      <div className="flex items-center justify-between w-full">
                        <span>{option.label}</span>
                        <Badge variant="secondary" className="ml-2 text-xs">
                          {option.count}
                        </Badge>
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
