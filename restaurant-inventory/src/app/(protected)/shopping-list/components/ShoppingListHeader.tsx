"use client";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2, Plus, RefreshCw, FileDown, Eye, EyeOff } from "lucide-react";
import { useCurrency } from "@/lib/currency";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";

interface ShoppingListHeaderProps {
  onAddItem: () => void;
  onGenerateList: () => Promise<void>;
  isGenerating: boolean;
  searchTerm: string;
  onSearchChange: (value: string) => void;
  selectedCategory: string;
  onCategoryChange: (value: string) => void;
  categories: string[];
  totalEstimatedCost: number;
  itemsCount?: {
    total: number;
    purchased: number;
    urgent: number;
    autoGenerated: number;
  };
  showPurchased?: boolean;
  onToggleShowPurchased?: () => void;
  onExportList?: () => void;
  sortBy?: string;
  onSortChange?: (value: string) => void;
  filterBy?: string;
  onFilterChange?: (value: string) => void;
}

export default function ShoppingListHeader({
  onAddItem,
  onGenerateList,
  isGenerating,
  searchTerm,
  onSearchChange,
  selectedCategory,
  onCategoryChange,
  categories,
  totalEstimatedCost,
  itemsCount = {
    total: 0,
    purchased: 0,
    urgent: 0,
    autoGenerated: 0,
  },
  showPurchased = false,
  onToggleShowPurchased = () => {},
  onExportList = () => {},
  sortBy = "date",
  onSortChange = () => {},
  filterBy = "all",
  onFilterChange = () => {},
}: ShoppingListHeaderProps) {
  const { formatCurrency } = useCurrency();
  const progress =
    itemsCount.total > 0
      ? Math.round((itemsCount.purchased / itemsCount.total) * 100)
      : 0;

  return (
    <div className="mb-6 space-y-4">
      {/* Header with Title and Actions */}
      <div className="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h1 className="text-2xl font-semibold">Shopping List</h1>
          <div className="mt-2 flex flex-wrap gap-2">
            <Badge variant="outline">
              Total: {formatCurrency(totalEstimatedCost)}
            </Badge>
            <Badge variant="outline">Progress: {progress}%</Badge>
            <Badge variant="outline" className="bg-yellow-50">
              Pending: {itemsCount.total - itemsCount.purchased}
            </Badge>
            {itemsCount.urgent > 0 && (
              <Badge variant="destructive">Urgent: {itemsCount.urgent}</Badge>
            )}
            <Badge variant="secondary">Auto: {itemsCount.autoGenerated}</Badge>
          </div>
        </div>
        <div className="flex flex-wrap gap-2">
          <Button onClick={onAddItem}>
            <Plus className="mr-2 h-4 w-4" />
            Add Item
          </Button>
          <Button
            onClick={onGenerateList}
            disabled={isGenerating}
            variant="outline"
          >
            {isGenerating ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <RefreshCw className="mr-2 h-4 w-4" />
            )}
            Generate List
          </Button>
          <Button onClick={onExportList} variant="outline">
            <FileDown className="mr-2 h-4 w-4" />
            Export
          </Button>
        </div>
      </div>

      {/* Filters and Controls */}
      <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
        <Input
          placeholder="Search items..."
          value={searchTerm}
          onChange={(e) => onSearchChange(e.target.value)}
        />

        <Select value={selectedCategory} onValueChange={onCategoryChange}>
          <SelectTrigger>
            <SelectValue placeholder="Select category" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Categories</SelectItem>
            {categories.map((category) => (
              <SelectItem key={category} value={category}>
                {category}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Select value={sortBy} onValueChange={onSortChange}>
          <SelectTrigger>
            <SelectValue placeholder="Sort by" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="urgency">Sort by Urgency</SelectItem>
            <SelectItem value="name">Sort by Name</SelectItem>
            <SelectItem value="cost">Sort by Cost</SelectItem>
            <SelectItem value="date">Sort by Date Added</SelectItem>
          </SelectContent>
        </Select>

        <Select value={filterBy} onValueChange={onFilterChange}>
          <SelectTrigger>
            <SelectValue placeholder="Filter by" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Items</SelectItem>
            <SelectItem value="pending">Pending Only</SelectItem>
            <SelectItem value="purchased">Purchased Only</SelectItem>
            <SelectItem value="auto">Auto-generated</SelectItem>
            <SelectItem value="manual">Manually Added</SelectItem>
            <SelectItem value="urgent">Urgent Items</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Show/Hide Purchased Toggle */}
      <div className="flex items-center space-x-2">
        <Switch
          checked={showPurchased}
          onCheckedChange={onToggleShowPurchased}
          id="show-purchased"
        />
        <Label htmlFor="show-purchased">
          {showPurchased ? (
            <span className="flex items-center">
              <EyeOff className="mr-2 h-4 w-4" />
              Hide Purchased Items
            </span>
          ) : (
            <span className="flex items-center">
              <Eye className="mr-2 h-4 w-4" />
              Show Purchased Items
            </span>
          )}
        </Label>
      </div>
    </div>
  );
}
