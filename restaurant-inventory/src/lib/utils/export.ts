import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { format } from "date-fns";
import { InventoryItem, Supplier } from "@/lib/types";

type ExportableData = Record<string, any>[];

/**
 * Exports data to an Excel file
 */
export function exportToExcel(
  data: ExportableData,
  filename: string = "export",
  sheetName: string = "Sheet1"
): void {
  // Create worksheet from data
  const ws = XLSX.utils.json_to_sheet(data);

  // Apply some basic styling to header row
  const range = XLSX.utils.decode_range(ws["!ref"] || "A1");
  for (let C = range.s.c; C <= range.e.c; ++C) {
    const address = XLSX.utils.encode_col(C) + "1";
    if (!ws[address]) continue;

    // Apply bold to headers
    ws[address].s = {
      font: { bold: true },
      fill: { fgColor: { rgb: "EFEFEF" } },
    };
  }

  // Create workbook and append worksheet
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, sheetName);

  // Generate file and trigger download
  const excelBuffer = XLSX.write(wb, { bookType: "xlsx", type: "array" });
  const blob = new Blob([excelBuffer], {
    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
  });

  // Add timestamp to filename for uniqueness
  const timestamp = format(new Date(), "yyyy-MM-dd-HHmm");
  saveAs(blob, `${filename}_${timestamp}.xlsx`);
}

/**
 * Format inventory data for Excel export
 */
export function formatInventoryForExport(items: InventoryItem[]): Record<string, any>[] {
  return items.map(item => ({
    "Name": item.name,
    "Category": item.category,
    "Quantity": item.quantity,
    "Unit": item.unit,
    "Reorder Level": item.reorderLevel,
    "Cost": item.cost,
    "Expiry Date": item.expiryDate
      ? format(new Date(item.expiryDate), "yyyy-MM-dd")
      : "N/A",
    "Supplier": item.supplierId ? "Yes" : "No",
    "Last Updated": item.updatedAt
      ? format(new Date(item.updatedAt), "yyyy-MM-dd HH:mm")
      : "N/A",
  }));
}

/**
 * Format supplier data for Excel export
 */
export function formatSuppliersForExport(suppliers: Supplier[]): Record<string, any>[] {
  return suppliers.map(supplier => ({
    "Name": supplier.name,
    "Contact Person": supplier.contactName || "N/A",
    "Email": supplier.email || "N/A",
    "Phone": supplier.phone || "N/A",
    "Address": supplier.address || "N/A",
    "Notes": supplier.notes || "N/A",
    "Last Updated": supplier.updatedAt
      ? format(new Date(supplier.updatedAt), "yyyy-MM-dd HH:mm")
      : "N/A",
  }));
}

/**
 * Format shopping list for Excel export
 */
export function formatShoppingListForExport(
  items: any[] // Replace with your ShoppingListItem type
): Record<string, any>[] {
  return items.map(item => ({
    "Name": item.name,
    "Quantity": item.quantity,
    "Unit": item.unit,
    "Auto-generated": item.isAutoGenerated ? "Yes" : "No",
    "Purchased": item.isPurchased ? "Yes" : "No",
    "Date Added": item.createdAt
      ? format(new Date(item.createdAt), "yyyy-MM-dd")
      : "N/A",
  }));
} 