"use client";

import { useState } from "react";
import { ShoppingListItem } from "@/lib/types";
import { X, Loader2 } from "lucide-react";

interface AddItemModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAddItem: (item: Partial<ShoppingListItem>) => Promise<void>;
  categories: string[];
  isAddingItem: boolean;
}

export default function AddItemModal({
  isOpen,
  onClose,
  onAddItem,
  categories,
  isAddingItem,
}: AddItemModalProps) {
  const [itemName, setItemName] = useState("");
  const [quantity, setQuantity] = useState(1);
  const [unit, setUnit] = useState("");
  const [category, setCategory] = useState("");
  const [estimatedCost, setEstimatedCost] = useState(0);
  const [notes, setNotes] = useState("");
  const [isUrgent, setIsUrgent] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Common units for selection
  const unitOptions = [
    "kg",
    "g",
    "lb",
    "oz",
    "l",
    "ml",
    "gal",
    "qt",
    "pc",
    "box",
    "can",
    "bottle",
    "pack",
    "bunch",
    "dozen",
  ];

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!itemName.trim()) {
      newErrors.name = "Item name is required";
    }

    if (quantity <= 0) {
      newErrors.quantity = "Quantity must be greater than 0";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    await onAddItem({
      name: itemName,
      quantity,
      unit,
      category,
      estimatedCost,
      notes,
      isUrgent,
      isPurchased: false,
      isAutoGenerated: false,
    });

    resetForm();
  };

  const resetForm = () => {
    setItemName("");
    setQuantity(1);
    setUnit("");
    setCategory("");
    setEstimatedCost(0);
    setNotes("");
    setIsUrgent(false);
    setErrors({});
  };

  if (!isOpen) return null;

  return (
    <div className="modal modal-open">
      <div className="modal-box">
        <button
          onClick={onClose}
          className="btn btn-sm btn-circle absolute right-2 top-2"
        >
          <X className="h-4 w-4" />
        </button>

        <h3 className="font-bold text-lg mb-4">Add Shopping Item</h3>

        <form onSubmit={handleSubmit}>
          <div className="form-control w-full mb-4">
            <label className="label">
              <span className="label-text">Item Name*</span>
            </label>
            <input
              type="text"
              placeholder="Enter item name"
              className={`input input-bordered w-full ${
                errors.name ? "input-error" : ""
              }`}
              value={itemName}
              onChange={(e) => setItemName(e.target.value)}
            />
            {errors.name && (
              <label className="label">
                <span className="label-text-alt text-error">{errors.name}</span>
              </label>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div className="form-control w-full">
              <label className="label">
                <span className="label-text">Quantity*</span>
              </label>
              <input
                type="number"
                min="0.1"
                step="any"
                className={`input input-bordered w-full ${
                  errors.quantity ? "input-error" : ""
                }`}
                value={quantity}
                onChange={(e) => setQuantity(Number(e.target.value))}
              />
              {errors.quantity && (
                <label className="label">
                  <span className="label-text-alt text-error">
                    {errors.quantity}
                  </span>
                </label>
              )}
            </div>

            <div className="form-control w-full">
              <label className="label">
                <span className="label-text">Unit</span>
              </label>
              <select
                className="select select-bordered w-full"
                value={unit}
                onChange={(e) => setUnit(e.target.value)}
              >
                <option value="">Select unit</option>
                {unitOptions.map((opt) => (
                  <option key={opt} value={opt}>
                    {opt}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div className="form-control w-full">
              <label className="label">
                <span className="label-text">Category</span>
              </label>
              <select
                className="select select-bordered w-full"
                value={category}
                onChange={(e) => setCategory(e.target.value)}
              >
                <option value="">Select category</option>
                {categories.map((cat) => (
                  <option key={cat} value={cat}>
                    {cat}
                  </option>
                ))}
              </select>
            </div>

            <div className="form-control w-full">
              <label className="label">
                <span className="label-text">Estimated Cost</span>
              </label>
              <input
                type="number"
                min="0"
                step="0.01"
                className="input input-bordered w-full"
                value={estimatedCost}
                onChange={(e) => setEstimatedCost(Number(e.target.value))}
              />
            </div>
          </div>

          <div className="form-control mb-4">
            <label className="label">
              <span className="label-text">Notes</span>
            </label>
            <textarea
              className="textarea textarea-bordered h-24"
              placeholder="Add any notes about this item"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
            ></textarea>
          </div>

          <div className="form-control mb-6">
            <label className="cursor-pointer label justify-start gap-2">
              <input
                type="checkbox"
                className="checkbox checkbox-warning"
                checked={isUrgent}
                onChange={(e) => setIsUrgent(e.target.checked)}
              />
              <span className="label-text">Mark as urgent</span>
            </label>
          </div>

          <div className="modal-action">
            <button type="button" onClick={onClose} className="btn btn-outline">
              Cancel
            </button>
            <button
              type="submit"
              className="btn btn-primary"
              disabled={isAddingItem}
            >
              {isAddingItem ? (
                <>
                  <span className="loading loading-spinner loading-xs mr-2"></span>
                  Adding...
                </>
              ) : (
                "Add Item"
              )}
            </button>
          </div>
        </form>
      </div>
      <div className="modal-backdrop" onClick={onClose}></div>
    </div>
  );
}
